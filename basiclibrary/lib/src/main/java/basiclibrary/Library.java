
/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.util.*;
import java.util.ArrayList;

public class Library {
    public boolean someLibraryMethod() {
        return true;
    }

    public static void main(String[] args) {
        int[] result = roll(4);
        for (int c = 0; c < result.length; c += 1) {
            System.out.println(result[c]);
        }
        boolean isDuplicate = containsDuplicates(result);
        System.out.println(isDuplicate);
        int[][] weeklyMonthTemperatures = { { 66, 64, 58, 65, 71, 57, 60 }, { 57, 65, 65, 70, 72, 65, 51 },
                { 55, 54, 60, 53, 59, 57, 61 }, { 65, 56, 55, 52, 55, 62, 57 } };

        System.out.println("Minimum avg array " + Arrays.toString(minimumAvrgArr(weeklyMonthTemperatures)));

        System.out.println(analyzingWeatherData(weeklyMonthTemperatures));

        List<String> votes = new ArrayList<>();
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Shrub");
        votes.add("Hedge");
        votes.add("Shrub");
        votes.add("Bush");
        votes.add("Hedge");
        votes.add("Bush");

        String winner = tally(votes);
        System.out.println(winner + " The winner");

    }

    public static int[] roll(int n) {
        int[] result = new int[n];
        for (int i = 0; i < n; i += 1) {
            result[i] = (int) Math.floor(Math.random() * (6 - 1 + 1) + 1);
        }
        return result;
    }

    public static boolean containsDuplicates(int[] arr) {
        for (int i = 0; i < arr.length; i += 1) {
            for (int c = 0; c < arr.length; c += 1) {
                if (i != c && arr[i] == arr[c]) {
                    return true;
                }
            }
        }
        return false;
    }

    public static float calculateAvarage(int[] arr) {
        float avg = 0.0f;
        for (int i = 0; i < arr.length; i += 1) {
            avg += arr[i];
        }
        return avg / arr.length;
    }

    public static int[] minimumAvrgArr(int[][] array){
        int[] newArr = array[0];
        for (int[] i : array) {
            if (calculateAvarage(i) < calculateAvarage(newArr)) {
                newArr = i;
            }


        }
        return newArr;
    }

    public static String analyzingWeatherData(int[][] arr) {
        int max = arr[0][0];
        int min = arr[0][0];
        HashSet<Integer> temp = new HashSet<Integer>();

        for (int[] parents : arr) {
            for (int child : parents) {
                if (child > max) {
                    max = child;
                }
                if (child < min) {
                    min = child;
                }
                temp.add(child);
            }
        }
        String neverSawTemp = "";
        for (int i = min; i < max; i++) {
            if (!temp.contains(i)) {
                neverSawTemp += ("\nnever saw temperature " + i);
            }
        }

        System.out.println("Maximum temperature: " + max);
        System.out.println("Minimum temperature: " + min);

        return neverSawTemp;
    }

    public static String tally(List<String> votes) {
        HashMap<String, Integer> newVotes = new HashMap<String, Integer>();
        String winner = "";
        int maxVotes = 0;

        for (String vote : votes) {
            if (!newVotes.containsKey(vote)) {
                newVotes.put(vote, 1);
            } else {
                newVotes.put(vote, newVotes.get(vote) + 1);

            }
        }
        for (Map.Entry<String, Integer> entry : newVotes.entrySet()) {
            if (entry.getValue() > maxVotes) {
                maxVotes = entry.getValue();
                winner = entry.getKey();
            }
        }
        return winner;
    }

}
